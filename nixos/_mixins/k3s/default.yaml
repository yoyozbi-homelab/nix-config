# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: kube-system
  name:  cloudflared
  labels:
    app:  cloudflared
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  cloudflared
    spec:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - image:  alpine #{"$imagescan": "cloudflared-scan"}
        command: ["/bin/sh"]
        args:
          - -c
          - >- 
            apk add --no-cache curl &&
            if [ $(arch) = 'x86_64' ]; then
              export arch="amd64"
            else
              export arch="arm64"
            fi &&
            curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-$arch -o /usr/bin/cloudflared &&
            chmod +x /usr/bin/cloudflared &&
            export TUNNEL_TOKEN="$(cat /etc/cloudflared-token)" &&
            cloudflared tunnel --no-autoupdate run 
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
          - mountPath: /etc/cloudflared-token
            name: cloudflared-token
            readOnly: true

        name:  cloudflared
      restartPolicy: Always
      volumes:
        - name: cloudflared-token
          hostPath:
            path: /etc/cloudflared-token
            type: File
---
apiVersion: v1
kind: Namespace
metadata:
  name: cattle-system
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: test-header
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: "https"
---
apiVersion: helm.cattle.io/v1
kind: HelmChartConfig
metadata:
  name: traefik
  namespace: kube-system
spec:
  valuesContent: |-
    logs:
      level: INFO
      access:
        enabled: true

    dashboard:
      enabled: true

    additionalArguments:
      - "--entryPoints.web.proxyProtocol.insecure"
      - "--entryPoints.websecure.proxyProtocol.insecure"
      - "--entryPoints.web.forwardedHeaders.insecure"

# See https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml for more examples
# The deployment.kind=DaemonSet and hostNetwork=true is to get real ip and x-forwarded for,
# and can be omitted if this is not needed.

# The updateStrategy settings are required for the latest traefik helm version when using hostNetwork.
# see more here: https://github.com/traefik/traefik-helm-chart/blob/v20.8.0/traefik/templates/daemonset.yaml#L12-L14
# but this version not yet supported by k3s, so leaving it commented out for now.
# The config above has been tested to work with latest stable k3s (v1.25.4+k3s1)
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-dashboard
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/name: traefik-dashboard
spec:
  type: ClusterIP
  ports:
  - name: traefik
    port: 9000
    targetPort: traefik
    protocol: TCP
  selector:
    app.kubernetes.io/instance: traefik-kube-system
    app.kubernetes.io/name: traefik
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: traefik-ingress
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
    traefik.frontend.passHostHeader: "true"
    traefik.backend.loadbalancer.sticky: "true"
spec:
  ingressClassName: traefik
  rules:
  - host: traefik-ocr1.yohanzbinden.ch
    http:
      paths:
        - path: /dashboard/
          pathType: Prefix
          backend:
            service:
              name: traefik-dashboard
              port:
                number: 9000
        - path: /api/
          pathType: Prefix
          backend:
            service:
              name: traefik-dashboard
              port:
                number: 9000
