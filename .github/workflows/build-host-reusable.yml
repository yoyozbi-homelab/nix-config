name: Build host reusable workflow

on:
  workflow_call:
    inputs:
      hostname:
        required: true
        type: string
      cacheName:
        required: true
        type: string
      setup-qemu:
        required: false
        type: boolean
        default: false
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
    secrets:
      CACHIX_AUTH_TOKEN:
        description: "the cachix auth token"
        required: true
      CACHIX_ACTIVATE_TOKEN:
        required: true

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: read
      id-token: write
    name: ⚠️ Build
    outputs:
      build: ${{ steps.agent.outputs.build }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: wimpysworld/nothing-but-nix@main
      - uses: ./.github/actions/setup-nix-cachix
        with:
          cacheName: ${{ inputs.cacheName }}
          setup-qemu: ${{ inputs.setup-qemu }}
          cachixAuthToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: ⚠️  Build
        id: agent
        run: |
          out_path=$(nix build -L --print-out-paths --accept-flake-config .#hosts.${{ inputs.hostname }})
          echo "Built $out_path"
          echo "build=$out_path" >> $GITHUB_OUTPUT
  deploy:
    needs: [build]
    runs-on: ${{ inputs.runs-on }}
    if: github.ref == 'refs/heads/main'
    name: 🚀 Deploy
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup-nix-cachix
        with:
          cacheName: ${{ inputs.cacheName }}
          setup-qemu: ${{ inputs.setup-qemu }}
          cachixAuthToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: 🚀 Deploy
        env:
          CACHIX_ACTIVATE_TOKEN: ${{ secrets.CACHIX_ACTIVATE_TOKEN }}
        run: |
          cat << EOF >> deploy.json
          {
            "agents": {
              "${{ inputs.hostname }}": "${{ needs.build.outputs.build }}"
            }
          }
          EOF
          cachix deploy activate deploy.json --async
