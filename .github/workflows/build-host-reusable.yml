name: Build host reusable workflow

on:
  workflow_call:
    inputs:
      outputName:
        required: true
        type: string
      cacheName:
        required: true
        type: string
      setup-qemu:
        required: false
        type: boolean
        default: false
      extra-nix-config:
        required: false
        type: string
    secrets:
      CACHIX_AUTH_TOKEN:
        description: 'the cachix auth token'
        required: true
      CACHIX_ACTIVATE_TOKEN:
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    name:  ⚠️ Build
    outputs: 
      build: ${{ steps.agent.outputs.build }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: docker/setup-qemu-action@v3
        if: ${{ inputs.setup-qemu }}
      - uses: cachix/install-nix-action@v25
        name: Install with extra config
        if: ${{ inputs.extra-nix-config != '' }}
        with:
          extra_nix_config: ${{ inputs.extra-nix-config }}
      - uses: cachix/install-nix-action@v25
        name: Install
        if: ${{ inputs.extra-nix-config == '' }}
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: cachix/cachix-action@v14
        with:
          name: ${{ inputs.cacheName }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: ⚠️  Build 
        id: agent
        run: | 
          out_path=$(nix build -L --print-out-paths --accept-flake-config .#${{ inputs.outputName }})
          echo "Built $out_path"
          echo "build=$out_path" >> $GITHUB_OUTPUT
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: 🚀 Deploy
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: cachix/install-nix-action@v25
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: cachix/cachix-action@v14
        with:
          name: ${{ inputs.cacheName }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: 🚀 Deploy
        env: 
          CACHIX_ACTIVATE_TOKEN: ${{ secrets.CACHIX_ACTIVATE_TOKEN }}
        run: |
          cat << EOF >> deploy.json
          {
            "agents": {
              "${{ inputs.outputName }}": ${{ needs.build.outputs.build }}
            }
          }
          EOF
          cachix deploy activate deploy.json
